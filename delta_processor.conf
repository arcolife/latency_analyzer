# `order` is used to identify loop sequence

# `skim` used to filter only required events from perf.data
# 	- notice, an extra kvm_entry here, at the end of pipe queue.

# for latency submission/completion, separate multiple deltas by a space
# 	- format is as follows: key__reference_key__<before/after>
# 	  this means, 'key' is present before/after reference_key 
##########################################################################
[Native]
# if KVM events found, then use this:
# skim_native = kvm_exit|sys_exit_ppoll|sys_enter_io_submit|sys_exit_io_submit|sys_enter_io_getevents|sys_exit_io_getevents|kvm_inj_virq|kvm_entry
# order = kvm_exit|sys_exit_ppoll|sys_enter_io_submit|sys_exit_io_submit|sys_enter_io_getevents|sys_exit_io_getevents
# submission = kvm_exit|sys_enter_io_submit
# completion = kvm_entry__kvm_inj_virq__after|sys_exit_ppoll__sys_enter_io_getevents__before

# if events are in raw_syscalls:sys_exit format instead of syscalls:kvm_exit, use this
skim_native = sys_exit|sys_exit_ppoll|sys_enter_io_submit|sys_exit_io_submit|sys_enter_io_getevents|sys_exit_io_getevents|sys_entry
order = sys_exit|sys_enter_io_submit|sys_exit_io_submit|sys_enter_io_getevents|sys_exit_io_getevents
submission = kvm_exit|sys_enter_io_submit
completion = kvm_entry__kvm_inj_virq__after|sys_exit_ppoll__sys_enter_io_getevents__before

[Threads]

# for seq read events:
skim_threads = kvm_exit|sys_exit_ppoll|sys_enter_pread64|sys_exit_pread64|kvm_inj_virq|kvm_entry
order = kvm_exit|sys_exit_ppoll|sys_enter_pread64|sys_exit_pread64
submission = kvm_exit|sys_enter_pread64
completion = kvm_entry__kvm_inj_virq__after|sys_exit_ppoll__sys_exit_pread64__before
